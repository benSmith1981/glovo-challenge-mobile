//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 color palettes.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 1 files.
  struct file {
    /// Resource file `Config.json`.
    static let configJson = Rswift.FileResource(bundle: R.hostingBundle, name: "Config", pathExtension: "json")
    
    /// `bundle.url(forResource: "Config", withExtension: "json")`
    static func configJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.configJson
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 3 images.
  struct image {
    /// Image `glovo`.
    static let glovo = Rswift.ImageResource(bundle: R.hostingBundle, name: "glovo")
    /// Image `greenFlag`.
    static let greenFlag = Rswift.ImageResource(bundle: R.hostingBundle, name: "greenFlag")
    /// Image `yellowPindrop`.
    static let yellowPindrop = Rswift.ImageResource(bundle: R.hostingBundle, name: "yellowPindrop")
    
    /// `UIImage(named: "glovo", bundle: ..., traitCollection: ...)`
    static func glovo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.glovo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "greenFlag", bundle: ..., traitCollection: ...)`
    static func greenFlag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.greenFlag, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "yellowPindrop", bundle: ..., traitCollection: ...)`
    static func yellowPindrop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.yellowPindrop, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 1 nibs.
  struct nib {
    /// Nib `CityDetailTableViewCell`.
    static let cityDetailTableViewCell = _R.nib._CityDetailTableViewCell()
    
    /// `UINib(name: "CityDetailTableViewCell", in: bundle)`
    static func cityDetailTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.cityDetailTableViewCell)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 1 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `cityDetail`.
    static let cityDetail: Rswift.ReuseIdentifier<CityDetailTableViewCell> = Rswift.ReuseIdentifier(identifier: "cityDetail")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 3 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    /// Storyboard `PopupVC`.
    static let popupVC = _R.storyboard.popupVC()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    /// `UIStoryboard(name: "PopupVC", bundle: ...)`
    static func popupVC(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.popupVC)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 3 localization tables.
  struct string {
    /// This `R.string.launchScreen` struct is generated, and contains static references to 0 localization keys.
    struct launchScreen {
      fileprivate init() {}
    }
    
    /// This `R.string.localizable` struct is generated, and contains static references to 5 localization keys.
    struct localizable {
      /// Base translation: Close and choose city
      /// 
      /// Locales: en, es, Base
      static let closeChooseCity = Rswift.StringResource(key: "closeChooseCity", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "Base"], comment: nil)
      /// Base translation: Go To Madrid
      /// 
      /// Locales: en, es, Base
      static let goToMadrid = Rswift.StringResource(key: "goToMadrid", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "Base"], comment: nil)
      /// Base translation: Out Of Bounds
      /// 
      /// Locales: en, es, Base
      static let outOfBounds = Rswift.StringResource(key: "outOfBounds", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "Base"], comment: nil)
      /// Base translation: You are outside of a working area, choose a city on the map
      /// 
      /// Locales: en, es, Base
      static let outofBoundsMessage = Rswift.StringResource(key: "outofBoundsMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "Base"], comment: nil)
      /// Base translation: You chose not to share your location, please select a city to see it is working area
      /// 
      /// Locales: en, es, Base
      static let refusedLocationMessage = Rswift.StringResource(key: "refusedLocationMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "Base"], comment: nil)
      
      /// Base translation: Close and choose city
      /// 
      /// Locales: en, es, Base
      static func closeChooseCity(_: Void = ()) -> String {
        return NSLocalizedString("closeChooseCity", bundle: R.hostingBundle, value: "Close and choose city", comment: "")
      }
      
      /// Base translation: Go To Madrid
      /// 
      /// Locales: en, es, Base
      static func goToMadrid(_: Void = ()) -> String {
        return NSLocalizedString("goToMadrid", bundle: R.hostingBundle, value: "Go To Madrid", comment: "")
      }
      
      /// Base translation: Out Of Bounds
      /// 
      /// Locales: en, es, Base
      static func outOfBounds(_: Void = ()) -> String {
        return NSLocalizedString("outOfBounds", bundle: R.hostingBundle, value: "Out Of Bounds", comment: "")
      }
      
      /// Base translation: You are outside of a working area, choose a city on the map
      /// 
      /// Locales: en, es, Base
      static func outofBoundsMessage(_: Void = ()) -> String {
        return NSLocalizedString("outofBoundsMessage", bundle: R.hostingBundle, value: "You are outside of a working area, choose a city on the map", comment: "")
      }
      
      /// Base translation: You chose not to share your location, please select a city to see it is working area
      /// 
      /// Locales: en, es, Base
      static func refusedLocationMessage(_: Void = ()) -> String {
        return NSLocalizedString("refusedLocationMessage", bundle: R.hostingBundle, value: "You chose not to share your location, please select a city to see it is working area", comment: "")
      }
      
      fileprivate init() {}
    }
    
    /// This `R.string.main` struct is generated, and contains static references to 0 localization keys.
    struct main {
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    struct _CityDetailTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = CityDetailTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "cityDetail"
      let name = "CityDetailTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> CityDetailTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CityDetailTableViewCell
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try popupVC.validate()
      try main.validate()
      try launchScreen.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if UIKit.UIImage(named: "glovo") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'glovo' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = ControllerView
      
      let bundle = R.hostingBundle
      let controller = StoryboardViewControllerResource<ControllerView>(identifier: "Controller")
      let detail = StoryboardViewControllerResource<DetailsViewController>(identifier: "detail")
      let map = StoryboardViewControllerResource<MapViewController>(identifier: "map")
      let name = "Main"
      
      func controller(_: Void = ()) -> ControllerView? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: controller)
      }
      
      func detail(_: Void = ()) -> DetailsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: detail)
      }
      
      func map(_: Void = ()) -> MapViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: map)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "greenFlag") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'greenFlag' is used in storyboard 'Main', but couldn't be loaded.") }
        if _R.storyboard.main().map() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'map' could not be loaded from storyboard 'Main' as 'MapViewController'.") }
        if _R.storyboard.main().detail() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'detail' could not be loaded from storyboard 'Main' as 'DetailsViewController'.") }
        if _R.storyboard.main().controller() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'controller' could not be loaded from storyboard 'Main' as 'ControllerView'.") }
      }
      
      fileprivate init() {}
    }
    
    struct popupVC: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = PopupViewController
      
      let bundle = R.hostingBundle
      let name = "PopupVC"
      let popupVC = StoryboardViewControllerResource<PopupViewController>(identifier: "popupVC")
      
      func popupVC(_: Void = ()) -> PopupViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: popupVC)
      }
      
      static func validate() throws {
        if _R.storyboard.popupVC().popupVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'popupVC' could not be loaded from storyboard 'PopupVC' as 'PopupViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
